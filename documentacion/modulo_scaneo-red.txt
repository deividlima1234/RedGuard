# Documentación del Módulo de Escaneo de Red

## Descripción General
Este módulo permite escanear una red local para identificar dispositivos conectados, obteniendo sus direcciones IP, MAC, nombres de host y asignando usuarios conocidos. Combina técnicas activas (ARP) y pasivas (escucha de tráfico) para maximizar la detección de dispositivos.

## Características Principales
- Escaneo ARP tradicional para dispositivos que responden a pings
- Detección pasiva de dispositivos mediante análisis de tráfico de red
- Resolución de nombres de host
- Integración con base de datos de usuarios (MAC-Usuario)
- Generación de reportes en CSV
- Envío automático de resultados por correo electrónico

## Requisitos
- Python 3.6 o superior
- Privilegios de administrador (sudo)
- Módulos requeridos:
  ```bash
  pip install scapy netifaces
  ```

## Configuración
Edite las siguientes variables al inicio del script:
```python
REMITENTE = "tu_email@gmail.com"
DESTINATARIO = "destinatario@gmail.com"
CONTRASEÑA_APP = "contraseña_de_aplicación"  # Para Gmail
RANGO_IP = "192.168.1.1/24"  # Ajustar a tu red
INTERFAZ = "eth0"  # Opcional, se autodetecta
TIEMPO_ESCUCHA = 30  # Segundos para escucha pasiva
```

## Estructura de Archivos
```
/
RedGuard/
──  README.md
├── app.py
├── config
│   ├── __pycache__
│   │   └── settings.cpython-312.pyc
│   └── settings.py
├── core
│   ├── auditoria.py
│   ├── comparador_lista_blanca.py
│   ├── dashboard.py
│   ├── escaneo_red.py
│   ├── escaner_puertos.py
│   ├── generador_reportes.py
│   ├── procesador.py
│   ├── __pycache__
│   │   ├── escaneo_red.cpython-312.pyc
│   │   ├── procesador.cpython-312.pyc
│   │   └── sistema_alertas.cpython-312.pyc
│   ├── sistema_alertas.py
│   └── utils.py
├── data
│   ├── historial.db
│   └── usuarios.json
├── documentacion
│   ├── modulo_scaneo-red.txt
│   └── RedGuard-proyecto.odt
├── main.py
├── reportes
│   ├── resultado-2025-08-04_15-33-30.csv
│   ├── resultado-2025-08-04_15-55-20.csv

├── requirements.txt
├── static
│   └── style.css
├── templates
│   └── dashboard.html
├── tests
│   └── test_escaneo.py
└── utils
    ├── archivo.py
    ├── helpers.py
    ├── __pycache__
    │   ├── archivo.cpython-312.pyc
    │   └── usuarios.cpython-312.pyc
    └── usuarios.py

13 directories, 46 files


```

## usuarios.json Formato
```json
{
  "00:11:22:33:44:55": "Usuario1",
  "aa:bb:cc:dd:ee:ff": "Usuario2"
}
```

## Funciones Principales

### `escanear_arp(rango_ip, interfaz)`
Realiza escaneo ARP tradicional.

**Parámetros:**
- `rango_ip`: Rango de IPs a escanear (ej. "192.168.1.0/24")
- `interfaz`: Interfaz de red a utilizar

**Retorna:**
Lista de dispositivos encontrados con IP y MAC

### `escuchar_trafico(interfaz, tiempo)`
Escucha tráfico de red pasivamente.

**Parámetros:**
- `interfaz`: Interfaz de red a monitorear
- `tiempo`: Segundos de captura

**Retorna:**
Dispositivos detectados mediante tráfico

### `obtener_nombres(dispositivos)`
Intenta resolver nombres de host.

**Parámetros:**
- `dispositivos`: Lista de dispositivos

**Retorna:**
Lista ampliada con nombres de host

### `guardar_csv(dispositivos, usuarios)`
Genera reporte CSV.

**Parámetros:**
- `dispositivos`: Lista de dispositivos
- `usuarios`: Diccionario MAC-Usuario

**Retorna:**
Nombre del archivo generado

## Ejecución
```bash
sudo python3 script.py
```

## Salida Esperada
```
Usando interfaz de red: eth0
Escaneando la red 192.168.1.1/24...
Escuchando tráfico en eth0 por 30 segundos...
Intentando obtener nombres de host...

IP              MAC               Usuario            Nombre Host         Método
------------------------------------------------------------------
192.168.1.1     00:11:22:33:44:55 Router             router.local        ARP
192.168.1.15    aa:bb:cc:dd:ee:ff Juan Perez         juan-phone          Tráfico
192.168.1.20    ff:ee:dd:cc:bb:aa Desconocido        desconocido         ARP

Resultado guardado en resultado-2023-11-15_14-30-00.csv
Correo enviado a destinatario@gmail.com
```

## Consideraciones de Seguridad
1. Requiere ejecución con privilegios root
2. Las contraseñas de aplicación deben protegerse
3. El archivo usuarios.json puede contener información sensible
4. Operar solo en redes propias o con autorización

## Limitaciones
- Dispositivos con firewall pueden no aparecer
- Algunos móviles modernos randomizan direcciones MAC
- La resolución de nombres depende de la configuración de red local

## Mejoras Futuras
- Integración con APIs de routers
- Detección de sistemas operativos
- Interfaz gráfica de usuario
- Monitoreo continuo

## Ejemplo de CSV Generado
```csv
IP,MAC,Usuario,Nombre Host,Método Detección
192.168.1.1,00:11:22:33:44:55,Routher,router.local,ARP
192.168.1.15,aa:bb:cc:dd:ee:ff,Juan Perez,juan-phone,Trafico
192.168.1.20,ff:ee:dd:cc:bb:aa,Desconocido,desconocido,ARP
```

## Soporte para Diferentes Sistemas Operativos
El script funciona en:
- Linux (requiere scapy y netifaces)
- macOS (requiere instalación adicional de libdnet)
- Windows (con limitaciones, requiere npcap)

## Troubleshooting
**Problema:** No detecta ningún dispositivo
**Solución:**
1. Verificar el rango IP correcto
2. Confirmar que la interfaz está activa
3. Probar con tiempo de escucha mayor

**Problema:** Error de permisos
**Solución:**
1. Ejecutar con sudo
2. Verificar instalación de dependencias

**Problema:** No envía correos
**Solución:**
1. Verificar contraseña de aplicación
2. Comprobar configuración SMTP
3. Revisar firewall bloqueando conexiones

Esta documentación cubre todos los aspectos esenciales del módulo de escaneo de red. Para usos avanzados, considere revisar el código fuente directamente.